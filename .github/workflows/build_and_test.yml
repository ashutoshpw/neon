name: build_and_test
on: [ push ]
defaults:
  run:
    shell: bash -ex {0}

jobs:
  check-codestyle-rust:
    runs-on: [ self-hosted, Linux ]
    strategy:
      matrix:
        rust_toolchain: [ 1.58 ]
    container:
      image: zimg/rust:${{ matrix.rust_toolchain }}

    steps:
      - name: Fix permissions
        run: sudo chmod -R a+rwx /__w/

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 1

      - name: Install rust toolchain ${{ matrix.rust_toolchain }}
        run: rustup default ${{ matrix.rust_toolchain }}

      - name: rustfmt
        run: cargo fmt --all -- --check

  build-postgres:
    runs-on: [ self-hosted, Linux ]
    strategy:
      matrix:
        build_type: [ debug, release ]
        rust_toolchain: [ 1.58 ]

    container:
      image: zimg/rust:${{ matrix.rust_toolchain }}
    env:
      BUILD_TYPE: ${{ matrix.build_type }}
    steps:
      - name: Fix permissions
        run: sudo chown -R $(id -u) /__w/ && sudo chmod -R a+rwx /__w/

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 1

      - name: Set pg revision for caching
        id: pg_ver
        run: echo ::set-output name=pg_rev::$(git rev-parse HEAD:vendor/postgres)

      - name: Cache postgres build
        id: cache_pg
        uses: actions/cache@v3
        with:
          path: tmp_install/
          key: v1-${{ runner.os }}-${{ matrix.build_type }}-pg-${{ steps.pg_ver.outputs.pg_rev }}-${{ hashFiles('Makefile') }}

      - name: Build postgres
        if: steps.cache_pg.outputs.cache-hit != 'true'
        run: COPT='-Werror' mold -run make postgres -j$(nproc)

      # actions/cache@v3 does not allow concurrently using the same cache across job steps, so use a separate cache
      - name: Prepare postgres artifact
        run: tar -C tmp_install/ -cf ./pg.tgz .
      - name: Upload postgres artifact
        uses: actions/upload-artifact@v3
        with:
          retention-days: 7
          if-no-files-found: error
          name: postgres-${{ runner.os }}-${{ matrix.build_type }}-artifact
          path: ./pg.tgz


  build-neon:
    runs-on: [ self-hosted, Linux ]
    needs: [ build-postgres ]
    strategy:
      matrix:
        build_type: [ debug, release ]
        rust_toolchain: [ 1.58 ]

    container:
      image: zimg/rust:${{ matrix.rust_toolchain }}
    env:
      BUILD_TYPE: ${{ matrix.build_type }}

    steps:
      - name: Fix permissions
        run: sudo chown -R $(id -u) /__w/ && sudo chmod -R a+rwx /__w/

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 1

      - name: Install rust toolchain ${{ matrix.rust_toolchain }}
        run: rustup default ${{ matrix.rust_toolchain }}

      - name: Get postgres artifact for restoration
        uses: actions/download-artifact@v3
        with:
          name: postgres-${{ runner.os }}-${{ matrix.build_type }}-artifact
          path: ./postgres-artifact/
      - name: Extract postgres artifact
        run: |
          mkdir ./tmp_install/
          tar -xf ./postgres-artifact/pg.tgz -C ./tmp_install/
          rm -rf ./postgres-artifact/
          
      - name: Cache cargo deps
        id: cache_cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/
            ~/.cargo/git/
            target/
          key: v1-${{ runner.os }}-${{ matrix.build_type }}-cargo-${{ matrix.rust_toolchain }}-${{ hashFiles('Cargo.lock') }}

      - name: Run cargo build
        run: |
          if [[ $BUILD_TYPE == "debug" ]]; then
            cov_prefix=(scripts/coverage "--profraw-prefix=$CIRCLE_JOB" --dir=/tmp/zenith/coverage run)
            CARGO_FLAGS=
          elif [[ $BUILD_TYPE == "release" ]]; then
            cov_prefix=()
            CARGO_FLAGS="--release --features profiling"
          fi
          
          export CARGO_INCREMENTAL=0
          export CACHEPOT_BUCKET=zenith-rust-cachepot
          export RUSTC_WRAPPER=cachepot
          export AWS_ACCESS_KEY_ID="${CACHEPOT_AWS_ACCESS_KEY_ID}"
          export AWS_SECRET_ACCESS_KEY="${CACHEPOT_AWS_SECRET_ACCESS_KEY}"
          "${cov_prefix[@]}" mold -run cargo build $CARGO_FLAGS --features failpoints --bins --tests
          cachepot -s

      - name: Run cargo test
        run: |
          if [[ $BUILD_TYPE == "debug" ]]; then
            cov_prefix=(scripts/coverage "--profraw-prefix=$CIRCLE_JOB" --dir=/tmp/zenith/coverage run)
            CARGO_FLAGS=
          elif [[ $BUILD_TYPE == "release" ]]; then
            cov_prefix=()
            CARGO_FLAGS=--release
          fi
          
          "${cov_prefix[@]}" cargo test $CARGO_FLAGS

      # TODO:
      # Install rust binaries
      # Install postgres binaries
      # Merge coverage data
      # persist_to_workspace

  check-codestyle-python:
    runs-on: [ self-hosted, Linux ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 1

      - name: Cache poetry deps
        id: cache_poetry
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: v1-${{ runner.os }}-python-deps-${{ hashFiles('poetry.lock') }}

      - name: Install Python deps
        # TODO preinstall poetry in runner image
        run: pip install poetry && ./scripts/pysync

      - name: Run yapf to ensure code format
        run: poetry run yapf --recursive --diff .

      - name: Run mypy to check types
        run: poetry run mypy .
